This journal's purpose is to record the development process of my senior thesis. I will mostly be outlining broad-ish progress reports here. For more
specific information about changes, I recommend looking through the commit history.

9/22/2015:
	Initial journal entry; hooray! In all seriousness, I may end up changing how I store this file, since this may become very bloated very quickly.
	After reading the AI book loaned to me by Dr. Wilson, I have came to the conclusion that I will be using a decision tree to model my agent. This
	doesn't surprise me too much, as that type of logical structure has been how I've been thinking about this project from the beginning, since the
	full decision-making hierarchy will be hard-coded. It is nice to see how such a system would be implemented, and formalizing things is always nice.

	This folder will contain all reference material I use in the creation of my project, but will not hold any of the actual assets used by my project.
	The first amongst these is "Card play priority.pdf", which currently contains a high-level breakdown of the logic flow used by the agent when
	selecting a card to play at any given point in the game. The boxes describing various conditions implicitly mean that a check will be made to see
	if any cards fit the given conditions for that particular play choice. If they do then that event is executed, with dotted lines going to additional
	logic subtrees as needed. This list is not complete, though, and will be supplemented and changed as necessary, the biggest supplement being the
	hierarchy of card events, which will be its own file.

	I'm not sure what else to add at the moment, but will keep maintaining this with random jottings and ideas I have to help document the development
	process. I'm going to create the file for the card hierarchies and possibly add to what I already have decided later tonight.


9/24/2015:
    Done some research into creating an executable, and it is pretty much as straightforward as I thought. Just need to compile the file in a specific
    way. As for making a GUI, that's going to be a lot more complicated. Since I'm aiming for a Windows audience, the best thing to use looks like the
    Windows API, which will require coding my project in C++, which I had planned on doing anyways. Yay for convenience making my decisions for me. I
    don't know entirely how difficult it will be to use the API, need to read more on how I would use it.

9/29/2015:
	After doing further research into the Windows API, I believe the type of program I will be creating is a Win32 application. Reading up on this, it
	is a decently meaty subject to learn about. Enough so that I am wondering whether or not this project will be as feasible as I first thought. Though
	it is supposed to be challenging, I feel like some prior knowledge in this field would be very useful. As of now I am following along a series of
	tutorials walking through the process of how Win32 apps work; they can be found at: http://www.relisoft.com/win32/. I'm still trying to process
	everything, so more will follow later. Though I am certain that this is the correct direction to be going in terms of what kind of program I will
	make.

10/13/2015:
	Added some resources that will be used as reference material. Have also decided that card dealing will be handled by the program, and the user will
	simply be told which cards they have been dealt. They will need a way to reference them, however, for only the names will be given. Additionally,
	I have came up with a list of use cases that my project will be using. For now they will be listed here:

	Start a game
		- Select Side
		- Optional Rules/Varients
		- Place Starting Influence

	Deal Cards
		- Acknowledge Receiving Cards

	Play a Card
		- Select Card
		- Event/Value/Scoring
		- if Value:
			- Influence/Coup/Realingment/Space Race
			- Target(s)

11/8/2015:
	Proposal and presentation have gone well thus far. More frequent updates will probably follow this entry because weekly progress updates are a
	required part of the remainder of the semester. As far as a goal for the end of the semester, I intend to have completed the series of tutorials
	that I am currently following to learn the in's and out's of Win32 applications, with the possibility of creating the most basic shell on which my
	program will be built. For my weekly goal, I intend to have completed most of the "Generic" tutorial on the website. This is the second tutorial
	in the series, but I am not sure if I will need to complete all of them to learn what I need to know.

11/17/2015:
	Been busier with other school work than anticipated. Current goal still stands to continue working though the tutorials to get a firmer grasp of
	how Win32 applications work. Semester goal has definitely been revised to include at least a running window with minimal functionality. This goal
	may be revised again. Will be updating with a breakdown of basic information contained in said tutorials later today.

	Update: After attempting to follow the tutorials I had selected, I have found a much better resource at http://www.winprog.org/tutorial/. This
	seems to be much more step-by-step and explains things in greater detail than the other one. Will be working from these from now on.

11/19/2015:
	New series of tutorials is much more helpful than the old ones; explanations are much more clear and concise, and I feel like I'm finally making
	actual progress on the Win32 part of my project. I now believe that making an application shell with basic functionality for my project shouldn't
	be a problem at all. A very generous estimate would have me being 50% done with the GUI and gamestate by the end of the semester. I intend to keep
	as much of the files that I currently have created as possible. Presenting progress tomorrow shouldn't be an issue.

11/29/2015:
	Due to unforeseen family visitation over Thanksgiving, I was unable to make progress over break as planned. That being said, my goals still remain
	the same: to continue to work through the tutorials I have found, adding to my working project as I go.

12/3/2015:
	Quick update on progress made thus far: I've added in a menu bar with a single non-functional entry as well as icon displayed on the desktop and
	upper left of the application window. This menu bar will be used for accessing "developer functions" (e.g. manually changing variables in the
	gamestate). Progress is continuing along, and new updates will be made as progress advances.

12/10/2015:
	I've added several new buttons to the menu bar which will be used to start new games and edit game information for debugging purposes. After I
	actually implement the gamestate, I will add functionality to these buttons. I will be continuing to work on the tutorials hoping to show dynamic
	content in the application itself fairly soon. More development fun to come in further entries.

12/15/2015:
	Objectives for Christmas break:
	• Content dynamically displayed on main screen
		o Individual entries for country influence for each side and an additional indicator for control
		o Entries for turn and other related board information
	• Game state mostly implemented
		o objects and variables implemented to track various game state related data
			- countries, turns, DEFCON, etc.
		o menu buttons created and working to manually edit game state variables

12/20/2015:
	After extensively scouring the Internet, I have determined that using a Win32 type application is not the way to go for this project. Using the
	free version of Visual Studio does not provide the necessary tools for visually creating the GUI, an essential reason that I pursued Win32 as an
	application type. After some research, I have found that a Visual C++ CLR project will provide the necessary framework for what I am doing. While
	this does mean I will essentially be discarding everything I have created up to this point, having followed a brief tutorial found here:
	http://www.bogotobogo.com/cplusplus/application_visual_studio_2013.php, I am confident I can get back to where I was before within a matter of hours.
	This will also mean that I will not be spending extensive time trying to learn the Windows API, which I believe was unnecessarily low level for my
	project. While some aspects may change(unsure if I can implement menu bars), I still will be coding in C++. I am glad I finally realized this at
	the beginning of break, as this will not be a serious setback, and I do believe that I will be able to achieve my goal for break.

	Edit: Took about an hour to catch up to where I was in the new project type.

12/29/2015:
	New program type is not without its flaws. I am unsure how to dynamically change displayed content after its initialization. This should not be too
	much of an issue to solve since it simply requires changing the appropriate variable. However, to do this the way I had planned to requires including
	a .cpp file in a .h file, which is something you can't do, apparently. I then realized that in my time at Hanover I can't remember really learning
	much about linking files together, which is a bit of a problem. My current problem stems from the fact that I apparently haven't learned about strings
	correctly, as I cannot seem to declare them in any method that I have been able to look up thus far. I will be looking into this more, but as it
	stands I am getting the current error: "a member of a managed class cannot be of a non-managed class type". I'm doing my best to figure out exactly
	what this means, but for now I'm pretty stuck. Going to open up an issue regarding this on GitHub.

	Update: Fixed the issue; turns out I was using something called a managed class, which is a feature of C++/CLI, which I didn't know I was using.
	-_- Anyways, I came to a solution by following advice here: http://stackoverflow.com/questions/9283383/mixed-management-in-c (saved for reference).

2/14/2016:
	Been a while since I wrote here. Unfortunately this semester hit me harder than I anticipated, and I haven't made any progress this year. But now
	that things have calmed down a bit, I intend to redouble my efforts and get down to business. I do still believe that I will be able to get everything
	done in the remaining time, though it will probably not be fun.

	Off to work I go.

	Edit: An issue I had been having is deciding how to represent country adjacency to a superpower, since they would not be included in the normal
	country list. To get around this I'm assigning the USA an id of -5 and USSR -10; this will give me an easy way to check since all the other countries
	have an id of their index in the country list.

	Edit2: I forgot Spain. -_-

2/27/2016:
	Discovered a strange error today. When I try to include my CountryList.h file in my Gamestate.cpp file, my program will fail to compile, citing
	errors in the countryList file. But without this include statement everything compiles fine. Since I need these files to cooperate with one another,
	I need to figure out what's specifically causing the issue.

	Edit: I'm also having issues integrating my custom made classes with the WinForm. This issue has to do with a conflict between managed and unmanaged
	classes. Need to learn more as to what this actually means, since I've never had to deal with this before.

2/28/2016:
	So I was able to solve the problem I was having linking my files together. I need to include both the country and countryList.h files in my
	gamestate.cpp. I also needed to initialize my CountryList object in the .cpp file and not the .h file. Not quite sure why this is, but that's okay.
	It works.

	Edit: Didn't work like I first thought.

2/29/2016:
	So I have truly and finally fixed the error I was having linking my custom classes together. What I needed to do was include the .h files in the
	.h files of the classes that used the earlier classes that I had made. Then I had to create a pointer to my countryList class inside of my gamestate
	object. Now I just need to figure out how to link my gamestate into my WinForm, and then I should have my GUI working.

	- So to get my content to be displayed dynamically, I need to create a function in my form that will refresh all of the relevant attributes on the
	screen. Will be testing this with a single country to start. The updated definition will look something like this:
	this->Algeria_USA->Text = System::Convert::ToString(this->game->countryLst->countries[1].get_infUSA());

	- To get my GUI to refresh itself, I need to add appropriate event handlers to the form. In order to do this I'm following the official Microsoft
	guide about WinForms.

	- I'm getting a problem in my refresh event that I'm reading/ writing to protected memory when I'm refreshing my display. This error is coming from
	my countryList. I may have to make it a list of pointers to my countries instead of actual country objects.

	- It looks like I haven't correctly used vectors; I will need to determine what I've done wrong.

3/1/2016:
	So I'm still stuck on my access error problem. I'm kind of hitting a brick wall here and even opened up a question on StackOverflow looking to
	figure out what is going wrong. Doing so has taught me that making a mini version of your project to isolate the error is a good idea; I made a
	second file that has the bare minimum necessary to replicate what's going wrong with my project. I can then use this as an easy way for testing
	potential solutions on a smaller, less time-consuming scale. Whether or not I get any meaningful feedback is another thing, but the issue can be
	found here: http://stackoverflow.com/questions/35713726/access-violation-exception-when-using-vectors-in-visual-c.

	- In my debugging project I changed all the classes to managed classes. This changed the error to a NullReference Exception, which makes me suspect
	that I'm not initializing my objects before I try to call them. Will need to look into this.

	- So far I'm striking out on getting any advice online. The one thing I have gotten is to use the debugger built into VisualStudio to try and isolate
	the problem. I am now in the process of learning how to use said debugger.

	- Done some digging with the debugger and feel like I have an idea what the problem is. The problem appears to be that my custom classes are being
	created only during the initialization and construction of the form, and after that point those objects are discarded. What I need to do is figure
	out how to make sure my data classes stay active until my form is closed. At least that's my working theory on the issue anyway.

3/2/2016:
	Doing some more research on Windows Forms, I think I need to initialize my custom data members in a background thread so that they are accessible
	during runtime. I am unsure if this will actually solve the problem, but it's the best lead I have to go on right now.

	- Reading more on threading makes me think it's not the way to go after all.

	- After doing even more research I believe I need to use data binding to get my custom made classes to talk to my GUI. The problem is that the
	instructions for doing so are incorrect, or at least not specific enough for me to follow them. I'm unsure if I can even add a custom data source
	to my project.

3/3/2016:
	Made another query on StackOverflow based on a few days of research and head-scratching:
	http://stackoverflow.com/questions/35788311/using-custom-data-classes-with-windows-forms
	Hopefully I can get a definitive answer to my problem.

	- Discovered that the software architecture pattern I have been wanting to use is called Model-View-Controller. I honestly didn't know it had a
	formal name; this would have been useful information to know a while ago.

3/4/2016:
	Decided that I need to work on other areas of the project. I'll start on the backbone of the AI today. Hopefully I can get it sorted out rather
	quickly.

	- I've been doing some thinking and realized I need a class above gamestate that will actually run the game; separating the data storage and logic
	sections feels like a smart move. It should also make it easier to get the gamestate and AI to interact with one another.

	I have also decided to name the AI agent Robert.

3/5/2016:
	Ive started my project over (again), since it seems I needed to make my project in C#. Thankfully it only took a minute to remake the GUI. Now I
	need to figure out how to data bind my classes. Hopefully they'll be able to stay in C++, but I'm not holding out any hope for that.

3/8/2016:
	Had fun today trying to fix VisualStudio. There was an update released 6 days ago that fixed an issue I was running into when trying to follow a
	tutorial on making data-bound forms. This tutorial seems to be really useful, but until I can get VisualStudio working, I'm kinda stuck.

3/10/2016:
	After two days screwing around fixing VisualStudio it appears that the tutorial I was following was a complete and utter waste of time. YAY! Now
	I'm just trying to figure out what to do from here since it looks like I won't have a GUI. Needless to say, this is really frustrating since I've
	spent a decent amount of time trying to do this.

3/15/2016:
	Been a few days since I wrote an entry; I was busy with other classes. Currently my goal is to just get all the back-end stuff implemented and get
	the AI working. The GUI has taken a second priority since I just need to get the actual project done and am feeling crunched for time.

	- Project currently runs on .Net 4.5.2, I would like to change this to 4.6 to include native Windows 10 compatibility but want to make sure that
	doing so doesn't break anything I currently have. So that will wait a bit.

	- Appears it worked without a hitch.

3/16/2016:
	Determined that my supervisor will make a new AI instance each time that a decision has to be made. That AI instance will have certain attributes
	that are dynamically created by following the AI logic that will be used by the Supervisor class to take the appropriate action in the game. Not
	sure if this is the most intelligent way to go about doing it, but it makes the most sense to me, especially since there are at least three
	different bits of data that the supervisor will need to have access to. The AI will go through a series of function calls to assemble the appropriate
	call state. This will be interesting.
	- Just learned about switch statements in C#, these are analogous to OCaml match statements and this makes me very happy.

3/17/2016:
	While creating Robert I'm quickly seeing that I have no chance of implementing an entire AI to play a full game by the due date. At this point
	I'm just looking to get the Early War period implemented and playable but even that is looking like a very daunting task. Which is very disappointing
	considering the fact that I felt sure that I could do it before.

	I still don't know whether or not I can make the GUI; still trying to follow up on some leads in regards to that, but I don't know what's going to
	happen. Needless to say I'm feeling fairly discouraged and overwhelmed. I feel like I over-committed myself to an incredibly difficult project but
	never put in enough time along the way since I'm also doing a bunch of other stuff too. I really regret taking the Programming Languages class; it's
	taking up way too much time that I don't have. My other classes aren't bad but have enough work to make them an actual entity that takes time.
	That's all for now.

	Edit: Forgot to mention that I've been having a ton on connectivity problems lately, think that my roommate is hogging the bandwidth with all the
	devices he uses at the same time.

3/19/2016:
	Things are looking up. I finally was able to resolve the issues I was having in dynamically displaying my content on the GUI; it was just a problem
	of the scope of my object. Now that that's figured out I can get that hammered away fairly quickly, but there still is a lot of work to be done.
	I'm slowly churning out Robert's decision-making procedures which are frustrating and confusing at times. I've determined that I'm only going to
	implement decision-making logic to cover card events for the first three turns of the game. There just isn't enough time to make over a hundred
	different conditions, and make those conditions actually do something.

3/20/2016:
	Making great progress on the GUI, things are dynamically displayed and I can change the values through the developer menu. Unfortunately I have
	discovered that my algorithm to randomly shuffle the cards is not doing that, its dealing each side the same cards each time. This is a problem.
	I'll need to look into why this is happening, but for right now I have more pressing priorities.
	- Turns out you need to actually shuffle cards and not just think you have shuffled them if you want them randomized.

3/22/2016:
	Finally finished implementing Robert, now to see if he works.
	-He's working to a degree, my testing capability is still limited at this point but that will get fleshed out more soon. Right now I'm making some
	general improvements to his logic. He's still a bit dumb.

3/23/2016:
	Find-and-Replace is a thing I need to remember exists. Very, very useful.
